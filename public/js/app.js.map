{"version":3,"file":"app.js","sourceRoot":"","sources":["../../src/ts/app.ts"],"names":[],"mappings":";AAAA,yFAAyF;AACzF,MAAM,MAAM,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AACxC,MAAM,GAAG,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAC/B,MAAM,MAAM,GAAG,WAAW,CAAC;AAC3B,mCAAmC;AACnC,4DAA4D;AAC5D,GAAG,CAAC,MAAM,GAAG;IACX,WAAW,EAAE,MAAM,CAAC,UAAU;IAC9B,eAAe,EAAE,MAAM,CAAC,UAAU;IAClC,MAAM,EAAE,MAAM;IACd,UAAU,EAAE,MAAM;CACnB,CAAC;AACF,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,uDAAuD;AAC7E,MAAM,QAAQ,GAAG,WACf,OAAO,CAAC,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,iBACxC,IAAI,MAAM,gBAAgB,CAAC;AAC3B,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,KAAK,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;AAGpD,qCAAqC;AACrC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACnC,MAAM,GAAG,GAAG,OAAO,EAAE,CAAC;AACtB,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAClC,MAAM,QAAQ,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAElC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAEtB,gBAAgB;AAChB,mDAAmD;AACnD;;;;;;;EAOE;AACF,KAAK,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,GAAQ,EAAE,IAAQ,EAAE,EAAE;IACtC,IAAI,GAAG;QAAE,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;;QAEnC,OAAO,CAAC,GAAG,CACT,iBAAiB,EACjB,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAK,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,IAAI,YAAY,IAAI,CAAC,CAAC,SAAS,IAAI,cAAc,CAAC,CAC1F,CAAC,CAAC,sEAAsE;IACzE,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;AACvC,CAAC,CAAC,CAAC;AACL,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC","sourcesContent":["//Setting up AWS. Docs: http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/MTurk.html\nconst config = require('./config.json');\nconst AWS = require(\"aws-sdk\");\nconst region = \"us-east-1\";\n//const aws_access_key_id = config;\n//const aws_secret_access_key = process.env.YOUR_SECRET_KEY;\nAWS.config = {\n  accessKeyId: config.access_key,\n  secretAccessKey: config.secret_key,\n  region: region,\n  sslEnabled: \"true\",\n};\nconst sandbox = true; // WARNING Setting this to false could costs you money!\nconst endpoint = `https://${\n  sandbox ? \"mturk-requester-sandbox\" : \"mturk-requester\"\n}.${region}.amazonaws.com`;\nconst mturk = new AWS.MTurk({ endpoint: endpoint });\n\n\n//Create Local Server through express\nconst express = require(\"express\");\nconst app = express();\napp.use(express.static(\"public\"));\nconst listener = app.listen(8080);\n\nconsole.log(\"haihai\");\n\n//getter command\n//List HITs (currently running, expired, done, etc)\n/**\n * Returns a list of HITs and their status associated with the current account\n *\n * @param x - The first input number\n * @param y - The second input number\n * @returns The arithmetic mean of `x` and `y`\n *\n*/\nmturk.listHITs({}, (err: any, data:any) => {\n    if (err) console.log(err, err.stack);\n    else\n      console.log(\n        \"Active HITs: \\n\",\n        data.HITs.filter((h:any) => h.HITStatus == \"Assignable\" || h.HITStatus == \"Unassignable\")\n      ); //not sure if leaving err and data types as any are the best practices\n      console.log(\"\\nfinished listing.\");\n  });\nconsole.log(\"hai\");\n"]}